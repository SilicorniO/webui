var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function($target$$, $property$$, $descriptor$$) {
  $target$$ != Array.prototype && $target$$ != Object.prototype && ($target$$[$property$$] = $descriptor$$.value);
};
$jscomp.getGlobal = function $$jscomp$getGlobal$($maybeGlobal$$) {
  return "undefined" != typeof window && window === $maybeGlobal$$ ? $maybeGlobal$$ : "undefined" != typeof global && null != global ? global : $maybeGlobal$$;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function $$jscomp$initSymbol$() {
  $jscomp.initSymbol = function $$jscomp$initSymbol$() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.Symbol = function() {
  var $counter$$ = 0;
  return function Symbol($opt_description$$) {
    return $jscomp.SYMBOL_PREFIX + ($opt_description$$ || "") + $counter$$++;
  };
}();
$jscomp.initSymbolIterator = function $$jscomp$initSymbolIterator$() {
  $jscomp.initSymbol();
  var $symbolIterator$$ = $jscomp.global.Symbol.iterator;
  $symbolIterator$$ || ($symbolIterator$$ = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[$symbolIterator$$] && $jscomp.defineProperty(Array.prototype, $symbolIterator$$, {configurable:!0, writable:!0, value:function() {
    return $jscomp.arrayIterator(this);
  }});
  $jscomp.initSymbolIterator = function $$jscomp$initSymbolIterator$() {
  };
};
$jscomp.arrayIterator = function $$jscomp$arrayIterator$($array$$) {
  var $index$$ = 0;
  return $jscomp.iteratorPrototype(function() {
    return $index$$ < $array$$.length ? {done:!1, value:$array$$[$index$$++]} : {done:!0};
  });
};
$jscomp.iteratorPrototype = function $$jscomp$iteratorPrototype$($iterator$$) {
  $jscomp.initSymbolIterator();
  $iterator$$ = {next:$iterator$$};
  $iterator$$[$jscomp.global.Symbol.iterator] = function $$iterator$$$$jscomp$global$Symbol$iterator$() {
    return this;
  };
  return $iterator$$;
};
$jscomp.makeIterator = function $$jscomp$makeIterator$($iterable$$) {
  $jscomp.initSymbolIterator();
  var $iteratorFunction$$ = $iterable$$[Symbol.iterator];
  return $iteratorFunction$$ ? $iteratorFunction$$.call($iterable$$) : $jscomp.arrayIterator($iterable$$);
};
$jscomp.polyfill = function $$jscomp$polyfill$($property$jscomp$5_split_target$$, $impl_polyfill$$, $fromLang_obj$$, $i$$) {
  if ($impl_polyfill$$) {
    $fromLang_obj$$ = $jscomp.global;
    $property$jscomp$5_split_target$$ = $property$jscomp$5_split_target$$.split(".");
    for ($i$$ = 0; $i$$ < $property$jscomp$5_split_target$$.length - 1; $i$$++) {
      var $key$$ = $property$jscomp$5_split_target$$[$i$$];
      $key$$ in $fromLang_obj$$ || ($fromLang_obj$$[$key$$] = {});
      $fromLang_obj$$ = $fromLang_obj$$[$key$$];
    }
    $property$jscomp$5_split_target$$ = $property$jscomp$5_split_target$$[$property$jscomp$5_split_target$$.length - 1];
    $i$$ = $fromLang_obj$$[$property$jscomp$5_split_target$$];
    $impl_polyfill$$ = $impl_polyfill$$($i$$);
    $impl_polyfill$$ != $i$$ && null != $impl_polyfill$$ && $jscomp.defineProperty($fromLang_obj$$, $property$jscomp$5_split_target$$, {configurable:!0, writable:!0, value:$impl_polyfill$$});
  }
};
$jscomp.polyfill("Object.is", function($orig$$) {
  return $orig$$ ? $orig$$ : function($left$$, $right$$) {
    return $left$$ === $right$$ ? 0 !== $left$$ || 1 / $left$$ === 1 / $right$$ : $left$$ !== $left$$ && $right$$ !== $right$$;
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.includes", function($orig$$) {
  return $orig$$ ? $orig$$ : function($searchElement$$, $i$jscomp$4_opt_fromIndex$$) {
    var $array$$ = this;
    $array$$ instanceof String && ($array$$ = String($array$$));
    var $len$$ = $array$$.length;
    for ($i$jscomp$4_opt_fromIndex$$ = $i$jscomp$4_opt_fromIndex$$ || 0; $i$jscomp$4_opt_fromIndex$$ < $len$$; $i$jscomp$4_opt_fromIndex$$++) {
      if ($array$$[$i$jscomp$4_opt_fromIndex$$] == $searchElement$$ || Object.is($array$$[$i$jscomp$4_opt_fromIndex$$], $searchElement$$)) {
        return !0;
      }
    }
    return !1;
  };
}, "es7", "es3");
$jscomp.checkStringArgs = function $$jscomp$checkStringArgs$($thisArg$$, $arg$$, $func$$) {
  if (null == $thisArg$$) {
    throw new TypeError("The 'this' value for String.prototype." + $func$$ + " must not be null or undefined");
  }
  if ($arg$$ instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + $func$$ + " must not be a regular expression");
  }
  return $thisArg$$ + "";
};
$jscomp.polyfill("String.prototype.includes", function($orig$$) {
  return $orig$$ ? $orig$$ : function($searchString$$, $opt_position$$) {
    return -1 !== $jscomp.checkStringArgs(this, $searchString$$, "includes").indexOf($searchString$$, $opt_position$$ || 0);
  };
}, "es6", "es3");
$jscomp.iteratorFromArray = function $$jscomp$iteratorFromArray$($array$$, $transform$$) {
  $jscomp.initSymbolIterator();
  $array$$ instanceof String && ($array$$ += "");
  var $i$$ = 0, $iter$$ = {next:function() {
    if ($i$$ < $array$$.length) {
      var $index$$ = $i$$++;
      return {value:$transform$$($index$$, $array$$[$index$$]), done:!1};
    }
    $iter$$.next = function $$iter$$$next$() {
      return {done:!0, value:void 0};
    };
    return $iter$$.next();
  }};
  $iter$$[Symbol.iterator] = function $$iter$$$Symbol$iterator$() {
    return $iter$$;
  };
  return $iter$$;
};
$jscomp.polyfill("Array.prototype.keys", function($orig$$) {
  return $orig$$ ? $orig$$ : function() {
    return $jscomp.iteratorFromArray(this, function($i$$) {
      return $i$$;
    });
  };
}, "es6", "es3");
function UIRedrawTimer() {
  this.time = null;
}
UIRedrawTimer.prototype.timer = function $UIRedrawTimer$$timer$($cb$$, $timeMillis$$) {
  $timeMillis$$ || ($timeMillis$$ = 20);
  var $running$$ = null != this.time;
  this.time = (new Date).getTime() + $timeMillis$$;
  $running$$ || this.timerLauncher($timeMillis$$, $cb$$);
};
UIRedrawTimer.prototype.timerLauncher = function $UIRedrawTimer$$timerLauncher$($timeInMillis$$, $cb$$) {
  setTimeout(function() {
    var $now$$ = (new Date).getTime();
    $now$$ > this.time ? (this.time = null, $cb$$()) : this.timerLauncher(this.time - $now$$, $cb$$);
  }.bind(this), $timeInMillis$$);
};
function UIViewUtils() {
}
UIViewUtils.prototype.calculateWidthView = function $UIViewUtils$$calculateWidthView$($view$jscomp$5_width$$, $ele$$, $index$$, $infiniteParent$$) {
  $ele$$.style.position = "fixed";
  $ele$$.style.width = "auto";
  $view$jscomp$5_width$$ = $ele$$.offsetWidth;
  0 < $view$jscomp$5_width$$ && $view$jscomp$5_width$$++;
  return $view$jscomp$5_width$$;
};
UIViewUtils.prototype.calculateHeightView = function $UIViewUtils$$calculateHeightView$($height$jscomp$11_view$$, $ele$$, $index$$, $infiniteParent$$) {
  $ele$$.style.position = "fixed";
  $ele$$.style.height = "auto";
  $height$jscomp$11_view$$ = $ele$$.offsetHeight;
  0 < $height$jscomp$11_view$$ && $height$jscomp$11_view$$++;
  return $height$jscomp$11_view$$;
};
UIViewUtils.prototype.calculateWidthViewSlow = function $UIViewUtils$$calculateWidthViewSlow$($parent$jscomp$2_view$$, $ele$jscomp$2_width$$) {
  $parent$jscomp$2_view$$ = $ele$jscomp$2_width$$.parentElement;
  var $parentWidth$$ = $parent$jscomp$2_view$$.offsetWidth, $parentScrollLeft$$ = $parent$jscomp$2_view$$.scrollLeft;
  $parent$jscomp$2_view$$.style.width = 10000;
  $ele$jscomp$2_width$$.style.display = "inline-block";
  $ele$jscomp$2_width$$.style.width = "auto";
  $ele$jscomp$2_width$$.style.height = "auto";
  $ele$jscomp$2_width$$ = $ele$jscomp$2_width$$.offsetWidth;
  0 < $ele$jscomp$2_width$$ && $ele$jscomp$2_width$$++;
  $parent$jscomp$2_view$$.style.width = $parentWidth$$;
  $parent$jscomp$2_view$$.scrollLeft = $parentScrollLeft$$;
  return $ele$jscomp$2_width$$;
};
UIViewUtils.prototype.calculateHeightViewSlow = function $UIViewUtils$$calculateHeightViewSlow$($parent$jscomp$3_view$$, $ele$jscomp$3_height$$) {
  $parent$jscomp$3_view$$ = $ele$jscomp$3_height$$.parentElement;
  var $parentHeight$$ = $parent$jscomp$3_view$$.offsetHeight, $parentScrollTop$$ = $parent$jscomp$3_view$$.scrollTop;
  $parent$jscomp$3_view$$.style.height = 10000;
  $ele$jscomp$3_height$$.style.display = "inline-block";
  $ele$jscomp$3_height$$.style.width = "auto";
  $ele$jscomp$3_height$$.style.height = "auto";
  $ele$jscomp$3_height$$ = $ele$jscomp$3_height$$.offsetHeight;
  0 < $ele$jscomp$3_height$$ && $ele$jscomp$3_height$$++;
  $parent$jscomp$3_view$$.style.height = $parentHeight$$;
  $parent$jscomp$3_view$$.scrollTop = $parentScrollTop$$;
  return $ele$jscomp$3_height$$;
};
UIViewUtils.prototype.generateIndexes = function $UIViewUtils$$generateIndexes$($elements$$) {
  for (var $indexes$$ = [], $i$$ = 0; $i$$ < $elements$$.length; $i$$++) {
    $elements$$[$i$$].id && ($indexes$$[$elements$$[$i$$].id] = $i$$);
  }
  return $indexes$$;
};
UIViewUtils.prototype.generateArrayViews = function $UIViewUtils$$generateArrayViews$($view$$, $aViews$$) {
  null == $aViews$$ && ($aViews$$ = []);
  $aViews$$.push($view$$);
  $view$$.forEachChild(function($child$$, $index$$) {
    this.generateArrayViews($child$$, $aViews$$);
  }.bind(this));
  return $aViews$$;
};
UIViewUtils.prototype.getViewsWithDependencyForView = function $UIViewUtils$$getViewsWithDependencyForView$($view$$, $hor$$, $ver$$) {
  var $dependencyViews$$ = [];
  if (!$view$$.parent) {
    return $dependencyViews$$;
  }
  var $viewId$$ = $view$$.id;
  $view$$.parent.forEachChild(function($parentChild$$, $index$$) {
    ($hor$$ && $parentChild$$.dependenciesHor.includes($viewId$$) || $ver$$ && $parentChild$$.dependenciesVer.includes($viewId$$)) && $dependencyViews$$.push($parentChild$$);
  });
  return $dependencyViews$$;
};
function UIUtils() {
}
UIUtils.prototype.readAttributes = function $UIUtils$$readAttributes$($aValues_text$$) {
  if (null == $aValues_text$$) {
    return [];
  }
  $aValues_text$$ = $aValues_text$$.replace(" ", "").split(";");
  for (var $aAttributes$$ = [], $i$$ = 0; $i$$ < $aValues_text$$.length; $i$$++) {
    var $aValue$$ = $aValues_text$$[$i$$].split(":");
    2 == $aValue$$.length ? $aAttributes$$.push({attr:$aValue$$[0], value:$aValue$$[1]}) : 1 == $aValue$$.length && $aAttributes$$.push({attr:$aValue$$[0], value:""});
  }
  return $aAttributes$$;
};
UIUtils.prototype.getPreviousUIScreen = function $UIUtils$$getPreviousUIScreen$($node$$) {
  $node$$ = this.getPreviousUIView($node$$);
  return null != $node$$ && $node$$.screen ? $node$$.screen : $node$$;
};
UIUtils.prototype.getPreviousUIView = function $UIUtils$$getPreviousUIView$($node$$) {
  return $node$$.ui ? $node$$.ui : $node$$.parentNode ? this.getPreviousUIView($node$$.parentNode) : null;
};
var uiShowLogs = !1, uiViewLogs = null;
function log($s$$) {
  logShow(0, $s$$);
}
function logW($s$$) {
  logShow(1, $s$$);
}
function logE($s$$) {
  logShow(2, $s$$);
}
function logI($s$$) {
  logShow(3, $s$$);
}
function logIView($prefix$$, $view$$) {
  logI("[" + $prefix$$ + "] " + $view$$.toString());
  $view$$.forEachChild(function($child$$, $index$$) {
    logIView($prefix$$, $child$$);
  });
}
function logShow($type$$, $log$jscomp$1_text$$) {
  if (uiShowLogs) {
    switch($type$$) {
      case 1:
        $log$jscomp$1_text$$ = "WARNING: " + $log$jscomp$1_text$$;
        break;
      case 2:
        $log$jscomp$1_text$$ = "ERROR: " + $log$jscomp$1_text$$;
        break;
      case 3:
        $log$jscomp$1_text$$ = "INFO: " + $log$jscomp$1_text$$;
    }
    console.log($log$jscomp$1_text$$);
    uiViewLogs && (uiViewLogs.innerHTML += $log$jscomp$1_text$$ + "<BR />");
  }
}
;function getScrollWidth() {
  var $inner_w2$$ = document.createElement("p");
  $inner_w2$$.style.width = "100%";
  $inner_w2$$.style.height = "200px";
  var $outer$$ = document.createElement("div");
  $outer$$.style.position = "absolute";
  $outer$$.style.top = "0px";
  $outer$$.style.left = "0px";
  $outer$$.style.visibility = "hidden";
  $outer$$.style.width = "200px";
  $outer$$.style.height = "150px";
  $outer$$.style.overflow = "hidden";
  $outer$$.appendChild($inner_w2$$);
  document.body.appendChild($outer$$);
  var $w1$$ = $inner_w2$$.offsetWidth;
  $outer$$.style.overflow = "scroll";
  $inner_w2$$ = $inner_w2$$.offsetWidth;
  $w1$$ == $inner_w2$$ && ($inner_w2$$ = $outer$$.clientWidth);
  document.body.removeChild($outer$$);
  return $w1$$ - $inner_w2$$;
}
function cleanViews($view$$) {
  $view$$.clean();
  $view$$.forEachChild(function($child$$, $index$$) {
    cleanViews($child$$);
  });
}
var counters = {};
function startCounter($name$$) {
  var $now$$ = (new Date).getTime();
  counters[$name$$] = $now$$;
}
function endCounter($name$$) {
  return (new Date).getTime() - counters[$name$$];
}
function endCounterLog($name$$) {
  log("Counter[" + $name$$ + "]: " + endCounter($name$$) + "ms");
}
;function UIConfiguration($uiConf$$) {
  this.attribute = "ui";
  this.attributes = [];
  this.dimens = {};
  this.timeRedraw = 20;
  this.showLogs = this.viewColors = !1;
  this.logsView = null;
  this.animations = {defaultTime:0.3, defaultOpacity:!1};
  if ($uiConf$$) {
    $uiConf$$.viewColors && (this.viewColors = !0);
    $uiConf$$.showLogs && (this.showLogs = !0, $uiConf$$.viewLogs && (this.logsView = document.getElementById($uiConf$$.viewLogs)));
    null != $uiConf$$.events && (this.events = $uiConf$$.events);
    if (null != $uiConf$$.animations) {
      var $animations_dimenKeys$$ = $uiConf$$.animations;
      null != $animations_dimenKeys$$.defaultTime && (this.animations.defaultTime = $animations_dimenKeys$$.defaultTime);
      null != $animations_dimenKeys$$.defaultOpacity && (this.animations.defaultOpacity = $animations_dimenKeys$$.defaultOpacity);
    }
    null == $uiConf$$.timeRedraw || isNaN($uiConf$$.timeRedraw) || (this.timeRedraw = parseInt($uiConf$$.timeRedraw, 10));
    $uiConf$$.attribute && (this.attribute = $uiConf$$.attribute);
    this.dimens = {};
    if ($uiConf$$.dimens) {
      $animations_dimenKeys$$ = Object.keys($uiConf$$.dimens);
      for (var $i$$ = 0; $i$$ < $animations_dimenKeys$$.length; $i$$++) {
        this.dimens[$animations_dimenKeys$$[$i$$]] = $uiConf$$.dimens[$animations_dimenKeys$$[$i$$]];
      }
    }
    this.screenModes = $uiConf$$.screenModes;
    this.refreshScreenSize();
  }
}
UIConfiguration.prototype.refreshScreenSize = function $UIConfiguration$$refreshScreenSize$() {
  var $aAttributes$$ = [], $dimens$$ = this.dimens, $widthScreen$$ = window.innerWidth, $heightScreen$$ = window.innerHeight;
  log("screen-width: " + $widthScreen$$);
  log("screen-height: " + $heightScreen$$);
  if (this.screenModes) {
    for (var $i$$ = 0; $i$$ < this.screenModes.length; $i$$++) {
      var $screenMode$$ = this.screenModes[$i$$];
      if ((!$screenMode$$.widthStart || 0 == $screenMode$$.widthStart || $screenMode$$.widthStart < $widthScreen$$) && (!$screenMode$$.widthEnd || 0 == $screenMode$$.widthEnd || $screenMode$$.widthEnd > $widthScreen$$) && (!$screenMode$$.heightStart || 0 == $screenMode$$.heightStart || $screenMode$$.heightStart < $heightScreen$$) && (!$screenMode$$.heightEnd || 0 == $screenMode$$.heightEnd || $screenMode$$.heightEnd < $heightScreen$$) && ($aAttributes$$.push($screenMode$$.attribute), log("SHOWING ATTRIBUTE: " + 
      $screenMode$$.attribute), $screenMode$$.dimens)) {
        for (var $dimenKeys$$ = Object.keys($screenMode$$.dimens), $n$$ = 0; $n$$ < $dimenKeys$$.length; $n$$++) {
          $dimens$$[$dimenKeys$$[$n$$]] = $screenMode$$.dimens[$dimenKeys$$[$n$$]];
        }
      }
    }
  }
  this.attributes = $aAttributes$$;
  this.selectedDimens = $dimens$$;
};
UIConfiguration.prototype.getDimen = function $UIConfiguration$$getDimen$($name$$) {
  if (this.selectedDimens[$name$$]) {
    return parseInt(this.selectedDimens[$name$$], 10);
  }
  if ($name$$ && !isNaN(parseInt($name$$, 10))) {
    return parseInt($name$$, 10);
  }
  logE('The dimension "' + $name$$ + '" is not valid or it is not defined');
  return 0;
};
UIConfiguration.prototype.sendStartEvent = function $UIConfiguration$$sendStartEvent$() {
  this.events && this.events({name:"start"});
};
UIConfiguration.prototype.sendEndEvent = function $UIConfiguration$$sendEndEvent$() {
  this.events && this.events({name:"end", attributes:this.attributes});
};
function UIView($element$$, $parent$$, $screen$$, $attributeMain$$, $attributes$$) {
  this.id = $element$$.id;
  this.element = $element$$;
  this.parent = $parent$$;
  this.screen = $screen$$;
  this.childrenOrderHor = [];
  this.childrenOrderVer = [];
  this.childrenUI = !0;
  this.orderNum = this.order = 0;
  this.dependenciesHor = [];
  this.dependenciesVer = [];
  this.bottomTop = this.bottomBottom = this.topBottom = this.topTop = this.rightLeft = this.rightRight = this.leftRight = this.leftLeft = "";
  this.sizeHeight = this.sizeWidth = "sc";
  this.percentHeightPos = this.percentWidthPos = this.heightValue = this.widthValue = 0;
  this.scrollHorizontal = this.scrollVertical = !1;
  this.gravityVer = this.gravityHor = "n";
  this.paddingBottomDimen = this.paddingRightDimen = this.paddingTopDimen = this.paddingLeftDimen = this.marginBottomDimen = this.marginRightDimen = this.marginTopDimen = this.marginLeftDimen = "0";
  this.visibility = "v";
  this.animationDurations = [];
  this.bottom = this.right = this.top = this.left = this.height = this.width = 0;
  this.scrollHorizontalApplied = this.scrollVerticalApplied = this.bottomChanged = this.rightChanged = this.topChanged = this.leftChanged = !1;
  this.paddingBottom = this.paddingRight = this.paddingTop = this.paddingLeft = this.marginBottom = this.marginRight = this.marginTop = this.marginLeft = 0;
  this.childrenInOrder = this.sizeLoaded = !1;
  this.init($attributeMain$$, $attributes$$);
  this.setWidth = this.setWidth;
  this.setHeight = this.setHeight;
  this.setLeft = this.setLeft;
  this.setRight = this.setRight;
  this.setTop = this.setTop;
  this.setBottom = this.setBottom;
  this.setAtLeft = this.setAtLeft;
  this.setAtRight = this.setAtRight;
  this.setAtTop = this.setAtTop;
  this.setAtBottom = this.setAtBottom;
  this.setMarginLeft = this.setMarginLeft;
  this.setMarginRight = this.setMarginRight;
  this.setMarginTop = this.setMarginTop;
  this.setMarginBottom = this.setMarginBottom;
  this.setMargins = this.setMargins;
  this.setPaddingLeft = this.setPaddingLeft;
  this.setPaddingRight = this.setPaddingRight;
  this.setPaddingTop = this.setPaddingTop;
  this.setPaddingBottom = this.setPaddingBottom;
  this.setPaddings = this.setPaddings;
  this.setVisibility = this.setVisibility;
  this.animateNextRefresh = this.animateNextRefresh;
}
UIView.prototype.init = function $UIView$$init$($attributeMain$$, $attributes$$) {
  this.readUI(this.element, $attributeMain$$, $attributes$$);
  this.element.ui = this;
  this.element.ui = this;
};
UIView.prototype.setWidth = function $UIView$$setWidth$($w$$) {
  if ("sc" == $w$$) {
    this.sizeWidth = $w$$, this.widthValue = 0;
  } else {
    if (-1 != String($w$$).indexOf("%")) {
      var $indexPercent$$ = $w$$.indexOf("%");
      this.widthValue = parseFloat($w$$.substring(0, $indexPercent$$));
      $indexPercent$$ < $w$$.length - 1 && (this.percentWidthPos = parseInt($w$$.substring($indexPercent$$ + 1, $w$$.length), 10));
      this.sizeWidth = "sp";
    } else {
      this.widthValue = parseInt($w$$, 10), this.sizeWidth = "s";
    }
  }
  this.sizeLoaded = !1;
};
UIView.prototype.setHeight = function $UIView$$setHeight$($h$$) {
  if ("sc" == $h$$) {
    this.sizeHeight = $h$$, this.heightValue = 0;
  } else {
    if (-1 != String($h$$).indexOf("%")) {
      var $indexPercent$$ = $h$$.indexOf("%");
      this.heightValue = parseInt($h$$.substring(0, $indexPercent$$), 10);
      $indexPercent$$ < $h$$.length - 1 && (this.percentHeightPos = parseInt($h$$.substring($indexPercent$$ + 1, $h$$.length), 10));
      this.sizeHeight = "sp";
    } else {
      this.heightValue = parseInt($h$$, 10), this.sizeHeight = "s";
    }
  }
  this.sizeLoaded = !1;
};
UIView.prototype.setLeft = function $UIView$$setLeft$($id$$) {
  this.leftLeft = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setRight = function $UIView$$setRight$($id$$) {
  this.rightRight = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setTop = function $UIView$$setTop$($id$$) {
  this.topTop = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setBottom = function $UIView$$setBottom$($id$$) {
  this.bottomBottom = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setAtLeft = function $UIView$$setAtLeft$($id$$) {
  this.rightLeft = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setAtRight = function $UIView$$setAtRight$($id$$) {
  this.leftRight = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setAtTop = function $UIView$$setAtTop$($id$$) {
  this.bottomTop = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setAtBottom = function $UIView$$setAtBottom$($id$$) {
  this.topBottom = $id$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setScrollVertical = function $UIView$$setScrollVertical$($id$$) {
  this.scrollVertical = $id$$;
};
UIView.prototype.setScrollHorizontal = function $UIView$$setScrollHorizontal$($id$$) {
  this.scrollHorizontal = $id$$;
};
UIView.prototype.setGravityHorizontal = function $UIView$$setGravityHorizontal$($gravity$$) {
  this.gravityHor = $gravity$$;
};
UIView.prototype.setGravityVertical = function $UIView$$setGravityVertical$($gravity$$) {
  this.gravityVer = $gravity$$;
};
UIView.prototype.setGravity = function $UIView$$setGravity$($gravityHor$$, $gravityVer$$) {
  this.gravityHor = $gravityHor$$;
  this.gravityVer = $gravityVer$$;
};
UIView.prototype.setMarginLeft = function $UIView$$setMarginLeft$($margin$$) {
  this.marginLeftDimen = $margin$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setMarginTop = function $UIView$$setMarginTop$($margin$$) {
  this.marginTopDimen = $margin$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setMarginRight = function $UIView$$setMarginRight$($margin$$) {
  this.marginRightDimen = $margin$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setMarginBottom = function $UIView$$setMarginBottom$($margin$$) {
  this.marginBottomDimen = $margin$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setMargins = function $UIView$$setMargins$($marginLeft$$, $marginTop$$, $marginRight$$, $marginBottom$$) {
  this.marginLeftDimen = $marginLeft$$;
  this.marginTopDimen = $marginTop$$;
  this.marginRightDimen = $marginRight$$;
  this.marginBottomDimen = $marginBottom$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setPaddingLeft = function $UIView$$setPaddingLeft$($padding$$) {
  this.paddingLeftDimen = $padding$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setPaddingTop = function $UIView$$setPaddingTop$($padding$$) {
  this.paddingTopDimen = $padding$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setPaddingRight = function $UIView$$setPaddingRight$($padding$$) {
  this.paddingRightDimen = $padding$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setPaddingBottom = function $UIView$$setPaddingBottom$($padding$$) {
  this.paddingBottomDimen = $padding$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setPaddings = function $UIView$$setPaddings$($paddingLeft$$, $paddingTop$$, $paddingRight$$, $paddingBottom$$) {
  this.paddingLeftDimen = $paddingLeft$$;
  this.paddingTopDimen = $paddingTop$$;
  this.paddingRightDimen = $paddingRight$$;
  this.paddingBottomDimen = $paddingBottom$$;
  this.sizeLoaded = !1;
};
UIView.prototype.setVisibility = function $UIView$$setVisibility$($visibility$$) {
  "g" != $visibility$$ && "g" == this.visibility && (this.sizeLoaded = !1);
  this.visibility = $visibility$$;
};
UIView.prototype.cleanSizeLoaded = function $UIView$$cleanSizeLoaded$() {
  this.sizeLoaded = !1;
  null == this.parent || "sc" != this.parent.sizeHeight && "sc" != this.parent.sizeWidth || this.parent.cleanSizeLoaded();
};
UIView.prototype.hasToBeCalculated = function $UIView$$hasToBeCalculated$() {
  return "g" != this.visibility;
};
UIView.prototype.animateNextRefresh = function $UIView$$animateNextRefresh$($animationDuration$$) {
  this.parent ? this.parent.animateDependencies($animationDuration$$) : this.animateDependencies($animationDuration$$);
};
UIView.prototype.animateDependencies = function $UIView$$animateDependencies$($animationDuration$$) {
  this.animationDurations.push($animationDuration$$);
  this.forEachChild(function($child$$) {
    $child$$.animateDependencies($animationDuration$$);
  });
};
UIView.prototype.getReferences = function $UIView$$getReferences$() {
  return [this.leftLeft, this.leftRight, this.rightRight, this.rightLeft, this.topTop, this.topBottom, this.bottomBottom, this.bottomTop];
};
UIView.prototype.getReferencesHor = function $UIView$$getReferencesHor$() {
  return [this.leftLeft, this.leftRight, this.rightRight, this.rightLeft];
};
UIView.prototype.getReferencesVer = function $UIView$$getReferencesVer$() {
  return [this.topTop, this.topBottom, this.bottomBottom, this.bottomTop];
};
UIView.prototype.setReference = function $UIView$$setReference$($i$$, $value$$) {
  switch($i$$) {
    case 0:
      this.leftLeft = $value$$;
      break;
    case 1:
      this.leftRight = $value$$;
      break;
    case 2:
      this.rightRight = $value$$;
      break;
    case 3:
      this.rightLeft = $value$$;
      break;
    case 4:
      this.topTop = $value$$;
      break;
    case 5:
      this.topBottom = $value$$;
      break;
    case 6:
      this.bottomBottom = $value$$;
      break;
    case 7:
      this.bottomTop = $value$$;
  }
};
UIView.prototype.hasUIChildren = function $UIView$$hasUIChildren$() {
  for (var $children$$ = this.element.childNodes, $i$$ = 0; $i$$ < $children$$.length; $i$$++) {
    if ($children$$[$i$$].ui) {
      return !0;
    }
  }
  return !1;
};
UIView.prototype.getChildElements = function $UIView$$getChildElements$() {
  return this.element.childNodes;
};
UIView.prototype.forEachChild = function $UIView$$forEachChild$($cb$$) {
  for (var $children$$ = this.element.childNodes, $i$$ = 0; $i$$ < $children$$.length; $i$$++) {
    var $child$$ = $children$$[$i$$].ui;
    $child$$ && $cb$$($child$$, $i$$);
  }
};
UIView.prototype.getPreviousView = function $UIView$$getPreviousView$() {
  var $previousView$$ = null;
  if (null == this.parent) {
    return null;
  }
  for (var $childNodes$$ = this.parent.element.childNodes, $i$$ = 0; $i$$ < $childNodes$$.length; $i$$++) {
    var $child$$ = $childNodes$$[$i$$].ui;
    if ($child$$) {
      if ($child$$.id == this.id) {
        return $previousView$$;
      }
      $child$$.hasToBeCalculated() && ($previousView$$ = $child$$);
    }
  }
  return null;
};
UIView.prototype.clean = function $UIView$$clean$() {
  this.cleanHor();
  this.cleanVer();
};
UIView.prototype.cleanHor = function $UIView$$cleanHor$() {
  this.rightChanged = this.leftChanged = !1;
  this.width = this.right = this.left = 0;
};
UIView.prototype.cleanVer = function $UIView$$cleanVer$() {
  this.bottomChanged = this.topChanged = !1;
  this.height = this.bottom = this.top = 0;
};
UIView.prototype.cleanUI = function $UIView$$cleanUI$() {
  this.bottomTop = this.bottomBottom = this.topBottom = this.topTop = this.rightLeft = this.rightRight = this.leftRight = this.leftLeft = "";
  this.sizeHeight = this.sizeWidth = "sc";
  this.percentHeightPos = this.percentWidthPos = this.heightValue = this.widthValue = 0;
  this.scrollHorizontal = this.scrollVertical = !1;
  this.gravityVer = this.gravityHor = "n";
  this.paddingBottomDimen = this.paddingRightDimen = this.paddingTopDimen = this.paddingLeftDimen = this.marginBottomDimen = this.marginRightDimen = this.marginTopDimen = this.marginLeftDimen = "0";
};
UIView.prototype.applyDimens = function $UIView$$applyDimens$($coreConfig$$) {
  this.paddingLeft = $coreConfig$$.getDimen(this.paddingLeftDimen);
  this.paddingRight = $coreConfig$$.getDimen(this.paddingRightDimen);
  this.paddingTop = $coreConfig$$.getDimen(this.paddingTopDimen);
  this.paddingBottom = $coreConfig$$.getDimen(this.paddingBottomDimen);
  this.marginLeft = $coreConfig$$.getDimen(this.marginLeftDimen);
  this.marginRight = $coreConfig$$.getDimen(this.marginRightDimen);
  this.marginTop = $coreConfig$$.getDimen(this.marginTopDimen);
  this.marginBottom = $coreConfig$$.getDimen(this.marginBottomDimen);
};
UIView.prototype.toString = function $UIView$$toString$() {
  return "[" + this.id + "]: ll:" + this.leftLeft + ", lr:" + this.leftRight + ", rr:" + this.rightRight + ", rl:" + this.rightLeft + ", tt:" + this.topTop + ",tb: " + this.topBottom + ", bb:" + this.bottomBottom + ", bt:" + this.bottomTop + ", ml:" + this.marginLeft + ", mr:" + this.marginRight + ", mt:" + this.marginTop + ",mb: " + this.marginBottom + ", pl:" + this.paddingLeft + ", pr:" + this.paddingRight + ", pt:" + this.paddingTop + ", pb:" + this.paddingBottom + ", w:" + this.width + ", h:" + 
  this.height + ", sh:" + this.sizeWidth + ", sh:" + this.sizeHeight + ", pId:" + (this.parent ? this.parent.id : "") + ", l:" + this.left + ", r:" + this.right + ", t:" + this.top + ", b:" + this.bottom;
};
UIView.prototype.readUI = function $UIView$$readUI$($element$jscomp$8_gValues_referencesHor_referencesVer_value$$, $attributeMain$jscomp$2_i$$, $attr_attributes$$) {
  var $aValues$$ = UIUtilsInstance.readAttributes($element$jscomp$8_gValues_referencesHor_referencesVer_value$$.getAttribute($attributeMain$jscomp$2_i$$));
  for ($attributeMain$jscomp$2_i$$ = 0; $attributeMain$jscomp$2_i$$ < $attr_attributes$$.length; $attributeMain$jscomp$2_i$$++) {
    $aValues$$ = $aValues$$.concat(UIUtilsInstance.readAttributes($element$jscomp$8_gValues_referencesHor_referencesVer_value$$.getAttribute($attr_attributes$$[$attributeMain$jscomp$2_i$$])));
  }
  if (0 != $aValues$$.length) {
    for ($attributeMain$jscomp$2_i$$ = 0; $attributeMain$jscomp$2_i$$ < $aValues$$.length; $attributeMain$jscomp$2_i$$++) {
      $attr_attributes$$ = $aValues$$[$attributeMain$jscomp$2_i$$].attr, $element$jscomp$8_gValues_referencesHor_referencesVer_value$$ = $aValues$$[$attributeMain$jscomp$2_i$$].value, "w" == $attr_attributes$$ ? this.setWidth($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "fw" == $attr_attributes$$ ? this.setWidth("100%") : "h" == $attr_attributes$$ ? this.setHeight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "fh" == $attr_attributes$$ ? this.setHeight("100%") : 
      "l" == $attr_attributes$$ ? this.setLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "r" == $attr_attributes$$ ? this.setRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "t" == $attr_attributes$$ ? this.setTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "b" == $attr_attributes$$ ? this.setBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "al" == $attr_attributes$$ ? this.setAtLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 
      "ale" == $attr_attributes$$ ? (this.setAtLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$)) : "ar" == $attr_attributes$$ ? this.setAtRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "are" == $attr_attributes$$ ? (this.setAtRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), 
      this.setBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$)) : "at" == $attr_attributes$$ ? this.setAtTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "ate" == $attr_attributes$$ ? (this.setAtTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$)) : "ab" == $attr_attributes$$ ? this.setAtBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 
      "abe" == $attr_attributes$$ ? (this.setAtBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$), this.setRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$)) : "ml" == $attr_attributes$$ ? this.setMarginLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "mr" == $attr_attributes$$ ? this.setMarginRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 
      "mt" == $attr_attributes$$ ? this.setMarginTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "mb" == $attr_attributes$$ ? this.setMarginBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "m" == $attr_attributes$$ ? ($attr_attributes$$ = $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.split(","), 1 == $attr_attributes$$.length ? this.setMargins($element$jscomp$8_gValues_referencesHor_referencesVer_value$$, $element$jscomp$8_gValues_referencesHor_referencesVer_value$$, 
      $element$jscomp$8_gValues_referencesHor_referencesVer_value$$, $element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 4 == $attr_attributes$$.length && this.setMargins($attr_attributes$$[0], $attr_attributes$$[1], $attr_attributes$$[2], $attr_attributes$$[3])) : "pl" == $attr_attributes$$ ? this.setPaddingLeft($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "pr" == $attr_attributes$$ ? this.setPaddingRight($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 
      "pt" == $attr_attributes$$ ? this.setPaddingTop($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "pb" == $attr_attributes$$ ? this.setPaddingBottom($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "p" == $attr_attributes$$ ? ($attr_attributes$$ = $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.split(","), 1 == $attr_attributes$$.length ? this.setPaddings($element$jscomp$8_gValues_referencesHor_referencesVer_value$$, $element$jscomp$8_gValues_referencesHor_referencesVer_value$$, 
      $element$jscomp$8_gValues_referencesHor_referencesVer_value$$, $element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 4 == $attr_attributes$$.length && this.setPaddings($attr_attributes$$[0], $attr_attributes$$[1], $attr_attributes$$[2], $attr_attributes$$[3])) : "gh" == $attr_attributes$$ ? this.setGravityHorizontal($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : "gv" == $attr_attributes$$ ? this.setGravityVertical($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : 
      "g" == $attr_attributes$$ ? ($element$jscomp$8_gValues_referencesHor_referencesVer_value$$ = $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.split(","), 2 == $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.length && this.setGravity($element$jscomp$8_gValues_referencesHor_referencesVer_value$$[0], $element$jscomp$8_gValues_referencesHor_referencesVer_value$$[1])) : "cui" == $attr_attributes$$ ? this.childrenUI = "n" == $element$jscomp$8_gValues_referencesHor_referencesVer_value$$ ? 
      !1 : !0 : "sv" == $attr_attributes$$ ? this.setScrollVertical(!0) : "sh" == $attr_attributes$$ ? this.setScrollHorizontal(!0) : "v" == $attr_attributes$$ ? this.setVisibility($element$jscomp$8_gValues_referencesHor_referencesVer_value$$) : logW("Attribute unknown: " + $attr_attributes$$ + " in view " + this.id);
    }
    $aValues$$ = !1;
    $element$jscomp$8_gValues_referencesHor_referencesVer_value$$ = this.getReferencesHor();
    for ($attributeMain$jscomp$2_i$$ = 0; $attributeMain$jscomp$2_i$$ < $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.length; $attributeMain$jscomp$2_i$$++) {
      if (0 < $element$jscomp$8_gValues_referencesHor_referencesVer_value$$[$attributeMain$jscomp$2_i$$].length) {
        $aValues$$ = !0;
        break;
      }
    }
    $aValues$$ || "c" == this.gravityHor || this.setLeft("p");
    $aValues$$ = !1;
    $element$jscomp$8_gValues_referencesHor_referencesVer_value$$ = this.getReferencesVer();
    for ($attributeMain$jscomp$2_i$$ = 0; $attributeMain$jscomp$2_i$$ < $element$jscomp$8_gValues_referencesHor_referencesVer_value$$.length; $attributeMain$jscomp$2_i$$++) {
      if (0 < $element$jscomp$8_gValues_referencesHor_referencesVer_value$$[$attributeMain$jscomp$2_i$$].length) {
        $aValues$$ = !0;
        break;
      }
    }
    $aValues$$ || "c" == this.gravityVer || this.setTop("p");
  }
};
function UIPrepare($refreshFunc$$) {
  this.refreshFunc = $refreshFunc$$;
  this.generatedId = 0;
  this.imgEventsAdded = !1;
}
UIPrepare.prototype.orderViews = function $UIPrepare$$orderViews$($parent$$) {
  $parent$$.childrenInOrder || ($parent$$.forEachChild(function($child$$, $index$$) {
    $child$$.dependenciesHor = [];
    $child$$.dependenciesVer = [];
  }), $parent$$.childrenOrderHor = this.orderViewsSameParent($parent$$, !0), $parent$$.childrenOrderVer = this.orderViewsSameParent($parent$$, !1), $parent$$.childrenInOrder = !0);
  $parent$$.forEachChild(function($child$$, $index$$) {
    0 < $child$$.getChildElements().length && this.orderViews($child$$);
  }.bind(this));
};
UIPrepare.prototype.orderViewsSameParent = function $UIPrepare$$orderViewsSameParent$($parent$$, $hor$$) {
  var $childElements$$ = $parent$$.getChildElements(), $views$$ = [], $views0dependencies$$ = 0, $lastChild$$ = null;
  $parent$$.forEachChild(function($child$$, $index$$) {
    $index$$ = 0;
    for (var $references$$ = $hor$$ ? $child$$.getReferencesHor() : $child$$.getReferencesVer(), $n$$ = 0; $n$$ < $references$$.length; $n$$++) {
      var $reference$$ = $references$$[$n$$];
      "p" == $reference$$ ? $reference$$ = $parent$$.id : "l" == $reference$$ && ($reference$$ = $lastChild$$ ? $lastChild$$.id : "");
      0 < $reference$$.length && ($hor$$ ? $child$$.dependenciesHor.push($reference$$) : $child$$.dependenciesVer.push($reference$$), $index$$++);
    }
    0 == $index$$ ? ($child$$.orderNum = 0, $views0dependencies$$++) : $child$$.orderNum = -1;
    $views$$.push($child$$);
    $lastChild$$ = $child$$;
  });
  var $indexes$$ = UIViewUtilsInstance.generateIndexes($childElements$$);
  do {
    var $allViewsSet$$ = !0;
    var $numViewsSet$$ = 0;
    $parent$$.forEachChild(function($child$$, $dependencies_index$$) {
      if (-1 == $child$$.orderNum) {
        $dependencies_index$$ = $hor$$ ? $child$$.dependenciesHor : $child$$.dependenciesVer;
        for (var $sumDependencies$$ = 0, $n$$ = 0; $n$$ < $dependencies_index$$.length; $n$$++) {
          var $orderNum$$ = 0;
          null != $indexes$$[$dependencies_index$$[$n$$]] && ($orderNum$$ = $childElements$$[$indexes$$[$dependencies_index$$[$n$$]]].ui.orderNum);
          if (-1 < $orderNum$$) {
            $sumDependencies$$ += $orderNum$$ + 1;
          } else {
            $sumDependencies$$ = 0;
            break;
          }
        }
        0 < $sumDependencies$$ ? ($child$$.orderNum = $sumDependencies$$, $numViewsSet$$++) : $allViewsSet$$ = !1;
      }
    });
  } while (!$allViewsSet$$ && 0 < $numViewsSet$$);
  0 == $numViewsSet$$ && $parent$$.hasUIChildren() && $views0dependencies$$ < $childElements$$.length && logE("Check cycle references in " + ($hor$$ ? "horizontal" : "vertical") + " for parent " + $parent$$.id);
  $views$$.sort(function($a$$, $b$$) {
    return $a$$.orderNum - $b$$.orderNum;
  });
  return $views$$;
};
UIPrepare.prototype.loadSizes = function $UIPrepare$$loadSizes$($elements$$, $coreConfig$$, $forceSizeLoaded$$) {
  $forceSizeLoaded$$ = void 0 === $forceSizeLoaded$$ ? !1 : $forceSizeLoaded$$;
  for (var $i$$ = 0; $i$$ < $elements$$.length; $i$$++) {
    var $ele$$ = $elements$$[$i$$], $view$$ = $ele$$.ui;
    $view$$ && $view$$.hasToBeCalculated() && ("none" == $ele$$.style.display && ($ele$$.style.display = "inline-block"), !$view$$.hasToBeCalculated() || !$forceSizeLoaded$$ && $view$$.sizeLoaded || ("sc" != $view$$.sizeWidth || $view$$.hasUIChildren() || ($view$$.widthValue = UIViewUtilsInstance.calculateWidthView($view$$, $ele$$)), "sc" != $view$$.sizeHeight || $view$$.hasUIChildren() || ($view$$.heightValue = UIViewUtilsInstance.calculateHeightView($view$$, $ele$$)), $view$$.applyDimens($coreConfig$$), 
    $view$$.sizeLoaded = !0), this.loadSizes($view$$.getChildElements(), $coreConfig$$, $forceSizeLoaded$$ || !$view$$.sizeLoaded));
  }
};
UIPrepare.prototype.loadSizeScreen = function $UIPrepare$$loadSizeScreen$($screen$$) {
  var $sizeChanged$$ = !1, $ele$$ = $screen$$.element;
  $ele$$.style.position = "absolute";
  "none" == $ele$$.style.display && ($ele$$.style.display = "inline-block");
  if ("sc" != $screen$$.sizeWidth) {
    "s" == $screen$$.sizeWidth ? $ele$$.style.width = $screen$$.widthValue + "px" : "sp" == $screen$$.sizeWidth && ($ele$$.style.width = $screen$$.widthValue + "%");
    var $offsetWidth$$ = $ele$$.offsetWidth;
    $offsetWidth$$ != $screen$$.width && ($screen$$.width = $offsetWidth$$, $sizeChanged$$ = !0);
  }
  "sc" != $screen$$.sizeHeight && ("s" == $screen$$.sizeHeight ? $ele$$.style.height = $screen$$.heightValue + "px" : "sp" == $screen$$.sizeWidth && ($ele$$.style.height = $screen$$.heightValue + "%"), $screen$$.height = $ele$$.offsetHeight);
  $ele$$.style.position = "relative";
  $screen$$.right = $screen$$.width;
  $screen$$.bottom = $screen$$.height;
  $screen$$.rightChanged = !0;
  $screen$$.leftChanged = !0;
  $screen$$.bottomChanged = !0;
  $screen$$.topChanged = !0;
  $screen$$.sizeLoaded = !0;
  return $sizeChanged$$;
};
UIPrepare.prototype.generateUIView = function $UIPrepare$$generateUIView$($element$$, $parent$jscomp$7_view$$, $screen$$, $config$$) {
  return $element$$.ui ? $element$$.ui : null != $element$$.tagName && null != $element$$.getAttribute($config$$.attribute) ? (0 == $element$$.id.length && ($element$$.id = "_aID_" + this.generatedId, this.generatedId++), $parent$jscomp$7_view$$ = new UIView($element$$, $parent$jscomp$7_view$$, $screen$$, $config$$.attribute, $config$$.attributes), $element$$.style.opacity = "0", null != $element$$.tagName && "img" == $element$$.tagName.toLowerCase() && ($element$$.onload = function() {
    $element$$.sizeLoaded = !1;
    this.refreshFunc();
  }.bind(this)), $parent$jscomp$7_view$$) : null;
};
UIPrepare.prototype.generateUIViews = function $UIPrepare$$generateUIViews$($element$$, $config$$, $aScreens$$, $parentScreen$$, $parentElement_view$$) {
  $aScreens$$ || ($aScreens$$ = []);
  var $i$jscomp$17_index$jscomp$66_parent$$ = null, $screen$$ = null;
  if (null == $parentElement_view$$) {
    $parentElement_view$$ = $element$$.parentNode;
    var $previousElement$$ = $element$$.previousSibling;
    null != $previousElement$$ && $previousElement$$.id && (lastViewId = $previousElement$$.id);
  }
  null != $parentElement_view$$ && $parentElement_view$$.ui && ($i$jscomp$17_index$jscomp$66_parent$$ = $element$$.parentNode.ui, $screen$$ = $i$jscomp$17_index$jscomp$66_parent$$.screen ? $i$jscomp$17_index$jscomp$66_parent$$.screen : $i$jscomp$17_index$jscomp$66_parent$$);
  ($parentElement_view$$ = this.generateUIView($element$$, $i$jscomp$17_index$jscomp$66_parent$$, $screen$$, $config$$)) && !$i$jscomp$17_index$jscomp$66_parent$$ && ($i$jscomp$17_index$jscomp$66_parent$$ = $aScreens$$.length, $parentScreen$$ && ($i$jscomp$17_index$jscomp$66_parent$$ = $aScreens$$.indexOf($parentScreen$$)), $aScreens$$.splice($i$jscomp$17_index$jscomp$66_parent$$, 0, $parentElement_view$$), $parentScreen$$ = $parentElement_view$$, $element$$.style.position = "relative");
  for ($i$jscomp$17_index$jscomp$66_parent$$ = 0; $i$jscomp$17_index$jscomp$66_parent$$ < $element$$.childNodes.length; $i$jscomp$17_index$jscomp$66_parent$$++) {
    this.generateUIViews($element$$.childNodes[$i$jscomp$17_index$jscomp$66_parent$$], $config$$, $aScreens$$, $parentScreen$$, $element$$);
  }
  return $parentElement_view$$;
};
UIPrepare.prototype.addNodes = function $UIPrepare$$addNodes$($nodesAdded$$, $screens$$, $configuration$$) {
  for (var $countNodesAdded$$ = 0; 0 < $nodesAdded$$.length;) {
    $countNodesAdded$$ += 1;
    var $node$jscomp$4_parentElement$$ = $nodesAdded$$[0];
    $nodesAdded$$.splice(0, 1);
    var $parentScreen$$ = UIUtilsInstance.getPreviousUIScreen($node$jscomp$4_parentElement$$);
    this.generateUIViews($node$jscomp$4_parentElement$$, $configuration$$, $screens$$, $parentScreen$$);
    ($node$jscomp$4_parentElement$$ = $node$jscomp$4_parentElement$$.parentNode) && $node$jscomp$4_parentElement$$.ui && ($node$jscomp$4_parentElement$$ = $node$jscomp$4_parentElement$$.ui, $node$jscomp$4_parentElement$$.childrenInOrder = !1, "sc" != $node$jscomp$4_parentElement$$.sizeWidth && "sc" != $node$jscomp$4_parentElement$$.sizeHeight || $node$jscomp$4_parentElement$$.cleanSizeLoaded());
  }
  return $countNodesAdded$$;
};
UIPrepare.prototype.removeNodes = function $UIPrepare$$removeNodes$($parentNodesRemoved$$) {
  for (var $countNodesRemoved$$ = 0; 0 < $parentNodesRemoved$$.length;) {
    $countNodesRemoved$$ += 1;
    var $parentNode$$ = $parentNodesRemoved$$[0];
    $parentNodesRemoved$$.splice(0, 1);
    var $refreshParent$$ = function $$refreshParent$$$($node$jscomp$5_parentNode$jscomp$2_view$$) {
      $node$jscomp$5_parentNode$jscomp$2_view$$ && $node$jscomp$5_parentNode$jscomp$2_view$$.ui ? ($node$jscomp$5_parentNode$jscomp$2_view$$ = $node$jscomp$5_parentNode$jscomp$2_view$$.ui, $node$jscomp$5_parentNode$jscomp$2_view$$.childrenInOrder = !1, "sc" != $node$jscomp$5_parentNode$jscomp$2_view$$.sizeWidth && "sc" != $node$jscomp$5_parentNode$jscomp$2_view$$.sizeHeight || $node$jscomp$5_parentNode$jscomp$2_view$$.cleanSizeLoaded()) : ($node$jscomp$5_parentNode$jscomp$2_view$$ = $node$jscomp$5_parentNode$jscomp$2_view$$.parentNode) && 
      $refreshParent$$($node$jscomp$5_parentNode$jscomp$2_view$$);
    };
    $refreshParent$$($parentNode$$);
  }
  return $countNodesRemoved$$;
};
UIPrepare.prototype.updateNodes = function $UIPrepare$$updateNodes$($nodesUpdated$$, $screens$$, $configuration$$) {
  for (var $countNodesModified$$ = 0, $nodeIdsUpdated$$ = []; 0 < $nodesUpdated$$.length;) {
    var $node$jscomp$6_parent$$ = $nodesUpdated$$[0];
    $nodesUpdated$$.splice(0, 1);
    var $view$$ = $node$jscomp$6_parent$$.ui;
    if (!$view$$ || !$nodeIdsUpdated$$.includes($view$$.id)) {
      $countNodesModified$$ += 1;
      if ($view$$) {
        $node$jscomp$6_parent$$.id != $view$$.id && ($view$$.id = $node$jscomp$6_parent$$.id), $view$$.cleanUI(), $view$$.readUI($view$$.element, $configuration$$.attribute, $configuration$$.attributes), $view$$.sizeLoaded = !1, $view$$.childrenInOrder = !1;
      } else {
        var $parentScreen$$ = UIUtilsInstance.getPreviousUIScreen($node$jscomp$6_parent$$);
        $view$$ = this.generateUIViews($node$jscomp$6_parent$$, $configuration$$, $screens$$, $parentScreen$$);
      }
      $view$$.forEachChild(function($child$$) {
        if (null == $child$$.parent) {
          var $screenIndex$$ = $screens$$.indexOf($child$$);
          -1 < $screenIndex$$ && $screens$$.splice($screenIndex$$, 1);
        }
        $child$$.parent = $view$$;
      });
      $view$$ && ($nodeIdsUpdated$$.push($view$$.id), $node$jscomp$6_parent$$ = $view$$.parent) && ($node$jscomp$6_parent$$.childrenInOrder = !1, $node$jscomp$6_parent$$.cleanSizeLoaded());
    }
  }
  return $countNodesModified$$;
};
function UIDraw() {
}
UIDraw.prototype.applyPositions = function $UIDraw$$applyPositions$($parentView$$, $viewColors$$) {
  var $maxX$$ = 0, $maxY$$ = 0, $paddingLeft$$ = 0, $paddingRight$$ = 0, $paddingTop$$ = 0, $paddingBottom$$ = 0;
  $viewColors$$ && ($parentView$$.element.style.backgroundColor = this.generateRandomViewColor());
  $parentView$$.forEachChild(function($childrenSize_view$$) {
    var $ele$$ = $childrenSize_view$$.element;
    $paddingBottom$$ = $paddingTop$$ = $paddingRight$$ = $paddingLeft$$ = 0;
    if (0 == $ele$$.childElementCount) {
      var $curStyle_left$$ = window.getComputedStyle($ele$$);
      "sc" == $childrenSize_view$$.sizeWidth && ($paddingLeft$$ = parseInt($curStyle_left$$.paddingLeft, 10), $paddingRight$$ = parseInt($curStyle_left$$.paddingRight, 10));
      "sc" == $childrenSize_view$$.sizeHeight && ($paddingTop$$ = parseInt($curStyle_left$$.paddingTop, 10), $paddingBottom$$ = parseInt($curStyle_left$$.paddingBottom, 10));
    }
    $ele$$.style.display = "inline-block";
    $ele$$.style.margin = "auto";
    0 < $ele$$.childElementCount && ($ele$$.style.padding = "0px");
    if (0 < $childrenSize_view$$.animationDurations.length) {
      $ele$$.style.transition = "all " + $childrenSize_view$$.animationDurations[0] + "s ease 0s";
      $ele$$.ui.animationDurations.splice(0, 1);
      var $endTranstion$$ = function $$endTranstion$$$($event$$) {
        log($event$$);
        $ele$$.style.transition = "";
        $ele$$.removeEventListener("transitionend", $endTranstion$$);
      };
      $ele$$.addEventListener("transitionend", $endTranstion$$);
    }
    $curStyle_left$$ = parseInt($childrenSize_view$$.left, 10);
    var $top$$ = parseInt($childrenSize_view$$.top, 10), $width$$ = 0 < $childrenSize_view$$.width ? $childrenSize_view$$.width - $paddingLeft$$ - $paddingRight$$ : 0, $height$$ = 0 < $childrenSize_view$$.height ? $childrenSize_view$$.height - $paddingTop$$ - $paddingBottom$$ : 0;
    $ele$$.style.left = $curStyle_left$$ + "px";
    $ele$$.style.top = $top$$ + "px";
    0 < $width$$ && ($ele$$.style.width = $width$$ + "px");
    0 < $height$$ && ($ele$$.style.height = $height$$ + "px");
    $ele$$.style.position = "absolute";
    $childrenSize_view$$.left + $childrenSize_view$$.width > $maxX$$ && ($maxX$$ = $childrenSize_view$$.left + $childrenSize_view$$.width);
    $childrenSize_view$$.top + $childrenSize_view$$.height > $maxY$$ && ($maxY$$ = $childrenSize_view$$.top + $childrenSize_view$$.height);
    $childrenSize_view$$ = this.applyPositions($childrenSize_view$$, $viewColors$$);
    $childrenSize_view$$.maxX > $maxX$$ && ($maxX$$ = $childrenSize_view$$.maxX);
    $childrenSize_view$$.maxY > $maxY$$ && ($maxY$$ = $childrenSize_view$$.maxY);
  }.bind(this));
  return {maxX:$maxX$$, maxY:$maxY$$};
};
UIDraw.prototype.applyVisibility = function $UIDraw$$applyVisibility$($view$$, $parentView$$, $configuration$$, $forceGone$$) {
  $forceGone$$ = void 0 === $forceGone$$ ? !1 : $forceGone$$;
  var $ele$$ = $view$$.element, $opacityOld$$ = parseInt($ele$$.style.opacity, 10), $opacityNow$$ = $opacityOld$$;
  "g" == $view$$.visibility || $forceGone$$ ? ($ele$$.style.display = "none", $opacityNow$$ = 0) : ($ele$$.style.display = "inline-block", $opacityNow$$ = "i" == $view$$.visibility || $parentView$$ && "i" == $parentView$$.visibility ? 0 : 1);
  $configuration$$.animations.defaultOpacity && $opacityNow$$ != $opacityOld$$ && ($ele$$.style.transition = "opacity " + $configuration$$.animations.defaultTime + "s ease 0s");
  $ele$$.style.opacity = $opacityNow$$;
  $view$$.forEachChild(function($childView$$) {
    this.applyVisibility($childView$$, $view$$, $configuration$$, "none" == $ele$$.style.display);
  }.bind(this));
};
UIDraw.prototype.generateRandomViewColor = function $UIDraw$$generateRandomViewColor$() {
  var $r$$ = parseInt(255 * Math.random(), 10), $g$$ = parseInt(255 * Math.random(), 10), $b$$ = parseInt(255 * Math.random(), 10);
  return "rgba(" + $r$$ + "," + $g$$ + "," + $b$$ + ",0.4)";
};
UIDraw.prototype.applySizeScreen = function $UIDraw$$applySizeScreen$($screenView$$, $width$$, $height$$) {
  var $ele$$ = document.getElementById($screenView$$.id);
  "s" != $screenView$$.id && null != $ele$$ && ($ele$$.style.width = "s" == $screenView$$.sizeWidth ? $screenView$$.width + "px" : "sp" == $screenView$$.sizeWidth ? $screenView$$.widthValue + "%" : $width$$ + "px", $ele$$.style.height = "s" == $screenView$$.sizeHeight ? $screenView$$.height + "px" : "sp" == $screenView$$.sizeHeight ? $screenView$$.heightValue + "%" : $height$$ + "px");
};
function UICore($scrollWidth$$) {
  this.scrollWidth = $scrollWidth$$;
}
UICore.prototype.calculateScreen = function $UICore$$calculateScreen$($screen$$) {
  var $arrayViews$$ = UIViewUtilsInstance.generateArrayViews($screen$$), $indexes$$ = UIViewUtilsInstance.generateIndexes($arrayViews$$);
  do {
    var $viewsRestored$$ = [];
    for (var $i$$ = 1; $i$$ < $arrayViews$$.length; $i$$++) {
      $arrayViews$$[$i$$].clean();
    }
    this.calculateViewsHor($screen$$.childrenOrderHor, $screen$$, $arrayViews$$, $indexes$$, $screen$$.width, $viewsRestored$$);
    this.calculateViewsVer($screen$$.childrenOrderVer, $screen$$, $arrayViews$$, $indexes$$, $screen$$.height, $viewsRestored$$);
  } while (0 < $viewsRestored$$.length);
};
UICore.prototype.calculateViewsHor = function $UICore$$calculateViewsHor$($views$$, $parentView$$, $arrayViews$$, $indexes$$, $width$$, $viewsRestored$$) {
  for (var $i$$ = 0; $i$$ < $views$$.length; $i$$++) {
    $views$$[$i$$].hasToBeCalculated() && this.calculateViewHor($views$$[$i$$], $parentView$$, $arrayViews$$, $indexes$$, $width$$, $viewsRestored$$);
  }
};
UICore.prototype.calculateViewHor = function $UICore$$calculateViewHor$($view$$, $parentView$$, $arrayViews$$, $indexes$$, $width$$, $viewsRestored$$) {
  for (var $numDependencies$$ = 0, $references$$ = $view$$.getReferencesHor(), $n$$ = 0; $n$$ < $references$$.length; $n$$++) {
    var $dependency$$ = this.calculateViewDependency($view$$, $references$$[$n$$], $parentView$$);
    0 < $dependency$$.length && (this.evalDependenceHor($view$$, $parentView$$, $width$$, $n$$, $arrayViews$$[$indexes$$[$dependency$$]]), $numDependencies$$ += 1);
  }
  0 == $numDependencies$$ && "c" != $view$$.gravityHor && ($view$$.left = 0, $view$$.leftChanged = !0);
  "s" == $view$$.sizeWidth ? this.applyFixedSizeHor($view$$) : "sp" == $view$$.sizeWidth && this.applyPercentHor($view$$, $parentView$$, $width$$);
  this.assignMarginsHor($view$$);
  $view$$.leftChanged && $view$$.rightChanged ? (this.assignSizeHor($view$$, $width$$), this.assignGravityHor($view$$, $width$$), 0 < $view$$.childrenOrderHor.length && (this.calculateViewsHor($view$$.childrenOrderHor, $view$$, $arrayViews$$, $indexes$$, $view$$.scrollHorizontal ? 0 : $view$$.width - $view$$.paddingLeft - $view$$.paddingRight, $viewsRestored$$), this.applyPaddingChildrenHor($view$$))) : (0 < $view$$.childrenOrderHor.length ? (this.calculateViewsHor($view$$.childrenOrderHor, $view$$, 
  $arrayViews$$, $indexes$$, 0, $viewsRestored$$), this.applyPaddingChildrenHor($view$$), this.applySizeChildrenHor($view$$, $arrayViews$$, $indexes$$, $viewsRestored$$)) : this.applySizeContentHor($view$$), this.assignSizeHor($view$$, $width$$), this.assignGravityHor($view$$, $width$$));
  this.applyScrollHor($view$$, $width$$) && ($view$$.paddingBottom += this.scrollWidth, $view$$.scrollHorizontalApplied = !0, $viewsRestored$$.push($view$$));
};
UICore.prototype.calculateViewsVer = function $UICore$$calculateViewsVer$($views$$, $parentView$$, $arrayViews$$, $indexes$$, $height$$, $viewsRestored$$) {
  for (var $i$$ = 0; $i$$ < $views$$.length; $i$$++) {
    $views$$[$i$$].hasToBeCalculated() && this.calculateViewVer($views$$[$i$$], $parentView$$, $arrayViews$$, $indexes$$, $height$$, $viewsRestored$$);
  }
};
UICore.prototype.calculateViewVer = function $UICore$$calculateViewVer$($view$$, $parentView$$, $arrayViews$$, $indexes$$, $height$$, $viewsRestored$$) {
  for (var $numDependencies$$ = 0, $references$$ = $view$$.getReferencesVer(), $n$$ = 0; $n$$ < $references$$.length; $n$$++) {
    var $dependency$$ = this.calculateViewDependency($view$$, $references$$[$n$$], $parentView$$);
    0 < $dependency$$.length && (this.evalDependenceVer($view$$, $parentView$$, $height$$, $n$$, $arrayViews$$[$indexes$$[$dependency$$]]), $numDependencies$$ += 1);
  }
  0 == $numDependencies$$ && "c" != $view$$.gravityVer && ($view$$.top = 0, $view$$.topChanged = !0);
  "s" == $view$$.sizeHeight ? this.applyFixedSizeVer($view$$) : "sp" == $view$$.sizeHeight && this.applyPercentVer($view$$, $parentView$$, $height$$);
  this.assignMarginsVer($view$$);
  $view$$.topChanged && $view$$.bottomChanged ? (this.assignSizeVer($view$$, $height$$), this.assignGravityVer($view$$, $height$$), 0 < $view$$.childrenOrderVer.length && (this.calculateViewsVer($view$$.childrenOrderVer, $view$$, $arrayViews$$, $indexes$$, $view$$.scrollVertical ? 0 : $view$$.height - $view$$.paddingTop - $view$$.paddingBottom, $viewsRestored$$), this.applyPaddingChildrenVer($view$$))) : (0 < $view$$.childrenOrderVer.length ? (this.calculateViewsVer($view$$.childrenOrderVer, $view$$, 
  $arrayViews$$, $indexes$$, 0, $viewsRestored$$), this.applyPaddingChildrenVer($view$$), this.applySizeChildrenVer($view$$, $arrayViews$$, $indexes$$, $viewsRestored$$)) : this.applySizeContentVer($view$$), this.assignSizeVer($view$$, $height$$), this.assignGravityVer($view$$, $height$$));
  this.applyScrollVer($view$$, $height$$) && ($view$$.paddingRight += this.scrollWidth, $view$$.scrollVerticalApplied = !0, $viewsRestored$$.push($view$$));
};
UICore.prototype.assignSizeHor = function $UICore$$assignSizeHor$($view$$, $width$$) {
  0 < $width$$ && ($view$$.right > $width$$ && ($view$$.right = $width$$), 0 > $view$$.left && ($view$$.left = 0));
  $view$$.width = $view$$.right - $view$$.left;
};
UICore.prototype.assignSizeVer = function $UICore$$assignSizeVer$($view$$, $height$$) {
  0 < $height$$ && ($view$$.bottom > $height$$ && ($view$$.bottom = $height$$), 0 > $view$$.top && ($view$$.top = 0));
  $view$$.height = $view$$.bottom - $view$$.top;
};
UICore.prototype.applyFixedSizeHor = function $UICore$$applyFixedSizeHor$($view$$) {
  $view$$.rightChanged ? ($view$$.left = $view$$.right - $view$$.widthValue, $view$$.leftChanged = !0) : ($view$$.right = $view$$.left + $view$$.widthValue, $view$$.leftChanged = !0, $view$$.rightChanged = !0);
};
UICore.prototype.applyFixedSizeVer = function $UICore$$applyFixedSizeVer$($view$$) {
  $view$$.bottomChanged ? ($view$$.top = $view$$.bottom - $view$$.heightValue, $view$$.topChanged = !0) : ($view$$.bottom = $view$$.top + $view$$.heightValue, $view$$.topChanged = !0, $view$$.bottomChanged = !0);
};
UICore.prototype.applyPaddingChildrenHor = function $UICore$$applyPaddingChildrenHor$($view$$) {
  0 != $view$$.paddingLeft && $view$$.forEachChild(function($child$$, $index$$) {
    $child$$.left += $view$$.paddingLeft;
    $child$$.right += $view$$.paddingLeft;
  });
};
UICore.prototype.applyPaddingChildrenVer = function $UICore$$applyPaddingChildrenVer$($view$$) {
  0 != $view$$.paddingTop && $view$$.forEachChild(function($child$$, $index$$) {
    $child$$.top += $view$$.paddingTop;
    $child$$.bottom += $view$$.paddingTop;
  });
};
UICore.prototype.applyScrollHor = function $UICore$$applyScrollHor$($view$$, $width$$) {
  if ($view$$.scrollHorizontal) {
    var $maxX$$ = 0;
    $view$$.forEachChild(function($child$$, $index$$) {
      $child$$.right > $maxX$$ && ($maxX$$ = $child$$.right);
    });
    if ($maxX$$ > $width$$ + $view$$.paddingLeft && !$view$$.scrollHorizontalApplied) {
      return document.getElementById($view$$.id).style.overflowX = "auto", !0;
    }
  }
  return !1;
};
UICore.prototype.applyScrollVer = function $UICore$$applyScrollVer$($view$$, $height$$) {
  if ($view$$.scrollVertical) {
    var $maxY$$ = 0;
    $view$$.forEachChild(function($child$$, $index$$) {
      $child$$.bottom > $maxY$$ && ($maxY$$ = $child$$.bottom);
    });
    if (("sc" != $view$$.sizeHeight || $maxY$$ > $height$$ + $view$$.paddingTop) && !$view$$.scrollVerticalApplied) {
      return document.getElementById($view$$.id).style.overflowY = "auto", !0;
    }
  }
  return !1;
};
UICore.prototype.applySizeContentHor = function $UICore$$applySizeContentHor$($view$$) {
  $view$$.rightChanged ? ($view$$.left = $view$$.right - $view$$.widthValue, $view$$.leftChanged = !0) : $view$$.leftChanged && ($view$$.right = $view$$.left + $view$$.widthValue, $view$$.rightChanged = !0, $view$$.leftChanged = !0);
};
UICore.prototype.applySizeContentVer = function $UICore$$applySizeContentVer$($view$$) {
  if ($view$$.bottomChanged) {
    $view$$.top = $view$$.bottom - $view$$.heightValue, $view$$.topChanged = !0;
  } else {
    if ($view$$.topChanged) {
      var $ele$$ = $view$$.element;
      $ele$$.style.width = $view$$.width + "px";
      $view$$.heightValue = $ele$$.offsetHeight;
      $view$$.bottom = $view$$.top + $view$$.heightValue;
      $view$$.bottomChanged = !0;
    } else {
      "c" == $view$$.gravityVer && ($ele$$ = $view$$.element, $ele$$.style.width = $view$$.width + "px", $view$$.heightValue = $ele$$.offsetHeight);
    }
  }
};
UICore.prototype.applySizeChildrenHor = function $UICore$$applySizeChildrenHor$($view$$, $arrayViews$$, $indexes$$, $viewsRestored$$) {
  var $$jscomp$this$$ = this, $minX$$ = 0, $maxX$$ = 0;
  $view$$.forEachChild(function($child$$, $index$$) {
    0 < $child$$.width && ($child$$.right > $maxX$$ ? $maxX$$ = $child$$.right : $child$$.left < $minX$$ && ($minX$$ = $child$$.left));
  });
  var $widthChildren$$ = $maxX$$ - $minX$$;
  0 == $widthChildren$$ ? $view$$.forEachChild(function($child$$) {
    $child$$.widthValue > $widthChildren$$ && ($widthChildren$$ = $child$$.widthValue);
  }) : 0 > $minX$$ && $view$$.forEachChild(function($child$$) {
    $child$$.leftChanged && $child$$.rightChanged && 0 < $child$$.width && ($child$$.left += -$minX$$, $child$$.right += -$minX$$);
  });
  $view$$.rightChanged ? $view$$.left = $view$$.right - $widthChildren$$ - $view$$.paddingLeft : ($view$$.right = $view$$.left + $widthChildren$$ + $view$$.paddingRight, $view$$.rightChanged = !0);
  $view$$.leftChanged = !0;
  $view$$.width = $view$$.right - $view$$.left;
  $view$$.forEachChild(function($child$$) {
    if (!$child$$.leftChanged || !$child$$.rightChanged || 0 >= $child$$.width) {
      $child$$.cleanHor(), $$jscomp$this$$.calculateViewHor($child$$, $view$$, $arrayViews$$, $indexes$$, $widthChildren$$, $viewsRestored$$);
    }
  });
};
UICore.prototype.applySizeChildrenVer = function $UICore$$applySizeChildrenVer$($view$$, $arrayViews$$, $indexes$$, $viewsRestored$$) {
  var $$jscomp$this$$ = this, $minY$$ = 0, $maxY$$ = 0;
  $view$$.forEachChild(function($child$$) {
    0 < $child$$.height && ($child$$.bottom > $maxY$$ ? $maxY$$ = $child$$.bottom : $child$$.top < $minY$$ && ($minY$$ = $child$$.top));
  });
  var $heightChildren$$ = $maxY$$ - $minY$$;
  0 == $heightChildren$$ ? $view$$.forEachChild(function($child$$) {
    $child$$.heightValue > $heightChildren$$ && ($heightChildren$$ = $child$$.heightValue);
  }) : 0 > $minY$$ && $view$$.forEachChild(function($child$$) {
    $child$$.topChanged && $child$$.bottomChanged && 0 < $child$$.height && ($child$$.left += -$minY$$, $child$$.right += -$minY$$);
  });
  $view$$.bottomChanged ? ($view$$.top = $view$$.bottom - $heightChildren$$ - $view$$.paddingTop, $view$$.topChanged = !0) : ($view$$.bottom = $view$$.top + $heightChildren$$ + $view$$.paddingBottom, $view$$.bottomChanged = !0);
  $view$$.height = $view$$.bottom - $view$$.top;
  $view$$.forEachChild(function($child$$) {
    if (!$child$$.topChanged || !$child$$.bottomChanged || 0 >= $child$$.height) {
      $child$$.cleanVer(), $$jscomp$this$$.calculateViewVer($child$$, $view$$, $arrayViews$$, $indexes$$, $heightChildren$$, $viewsRestored$$);
    }
  });
};
UICore.prototype.applyPercentHor = function $UICore$$applyPercentHor$($view$$, $parentView$$, $width$$) {
  $view$$.rightChanged && !$view$$.leftChanged ? $view$$.left = $view$$.right - $parentView$$.width * $view$$.widthValue / 100 : $view$$.right = $view$$.left + $parentView$$.width * $view$$.widthValue / 100;
  0 < $view$$.percentWidthPos && ($parentView$$ = ($view$$.right - $view$$.left) * $view$$.percentWidthPos, $view$$.left += $parentView$$, $view$$.right += $parentView$$);
  $view$$.rightChanged = !0;
  $view$$.leftChanged = !0;
};
UICore.prototype.applyPercentVer = function $UICore$$applyPercentVer$($view$$, $parentView$$, $height$$) {
  $view$$.bottomChanged && !$view$$.topChanged ? $view$$.top = $view$$.bottom - $parentView$$.height * $view$$.heightValue / 100 : $view$$.bottom = $view$$.top + $parentView$$.height * $view$$.heightValue / 100;
  0 < $view$$.percentHeightPos && ($parentView$$ = ($view$$.bottom - $view$$.top) * $view$$.percentHeightPos, $view$$.top += $parentView$$, $view$$.bottom += $parentView$$);
  $view$$.bottomChanged = !0;
  $view$$.topChanged = !0;
};
UICore.prototype.assignGravityHor = function $UICore$$assignGravityHor$($view$$, $width$$) {
  if ("n" != $view$$.gravityHor) {
    if ("l" == $view$$.gravityHor) {
      $view$$.left = 0, $view$$.leftChanged = !0;
    } else {
      if ("r" == $view$$.gravityHor && 0 < $width$$) {
        $view$$.right = $width$$, $view$$.left = $view$$.right - $view$$.width;
      } else {
        if ("c" == $view$$.gravityHor && 0 < $width$$) {
          var $viewWidth$$ = 0 < $view$$.width ? $view$$.width : $view$$.widthValue;
          $view$$.left = Math.max(0, ($width$$ - $viewWidth$$) / 2);
          $view$$.right = Math.min($width$$, $view$$.left + $viewWidth$$);
          $view$$.leftChanged = !0;
          $view$$.rightChanged = !0;
          $view$$.width = $view$$.right - $view$$.left;
        }
      }
    }
  }
};
UICore.prototype.assignGravityVer = function $UICore$$assignGravityVer$($view$$, $height$$) {
  if ("n" != $view$$.gravityVer) {
    if ("t" == $view$$.gravityVer) {
      $view$$.top = 0, $view$$.topChanged = !0;
    } else {
      if ("b" == $view$$.gravityVer && 0 < $height$$) {
        $view$$.bottom = $height$$, $view$$.top = $view$$.bottom - $view$$.height;
      } else {
        if ("c" == $view$$.gravityVer && 0 < $height$$) {
          var $viewHeight$$ = 0 < $view$$.height ? $view$$.height : $view$$.heightValue;
          $view$$.top = Math.max(0, ($height$$ - $viewHeight$$) / 2);
          $view$$.bottom = Math.min($height$$, $view$$.top + $viewHeight$$);
          $view$$.topChanged = !0;
          $view$$.bottomChanged = !0;
          $view$$.height = $view$$.bottom - $view$$.top;
        }
      }
    }
  }
};
UICore.prototype.assignMarginsHor = function $UICore$$assignMarginsHor$($view$$) {
  var $viewMarginLeft$$ = $view$$.marginLeft, $viewMarginRight$$ = $view$$.marginRight;
  0 != $viewMarginLeft$$ && $view$$.leftChanged && ($view$$.left += $viewMarginLeft$$, $view$$.rightChanged && "s" != $view$$.sizeWidth || ($view$$.right += $viewMarginLeft$$));
  0 != $viewMarginRight$$ && $view$$.rightChanged && ($view$$.right -= $viewMarginRight$$, $view$$.leftChanged && "s" != $view$$.sizeWidth || ($view$$.left -= $viewMarginRight$$));
};
UICore.prototype.assignMarginsVer = function $UICore$$assignMarginsVer$($view$$) {
  var $viewMarginTop$$ = $view$$.marginTop, $viewMarginBottom$$ = $view$$.marginBottom;
  0 != $view$$.marginTop && $view$$.topChanged && ($view$$.top += $viewMarginTop$$, $view$$.bottomChanged && "s" != $view$$.sizeHeight || ($view$$.bottom += $viewMarginTop$$));
  0 != $view$$.marginBottom && $view$$.bottomChanged && ($view$$.bottom -= $viewMarginBottom$$, $view$$.topChanged && "s" != $view$$.sizeHeight || ($view$$.top -= $viewMarginBottom$$));
};
UICore.prototype.evalDependenceHor = function $UICore$$evalDependenceHor$($view$$, $parentView$$, $width$$, $iReference$$, $viewDependency$$) {
  if (null == $viewDependency$$) {
    logE("The view '" + $view$$.id + "' has a wrong reference");
  } else {
    switch($iReference$$) {
      case 0:
        $parentView$$ != $viewDependency$$ && ($view$$.left = $viewDependency$$.left);
        $view$$.leftChanged = !0;
        break;
      case 1:
        $view$$.left = $viewDependency$$.rightChanged ? $viewDependency$$.right : $viewDependency$$.left + $viewDependency$$.width;
        $view$$.leftChanged = !0;
        break;
      case 2:
        if ($parentView$$ == $viewDependency$$) {
          if ($parentView$$.rightChanged) {
            $view$$.right = $width$$;
          } else {
            $view$$.right = 0;
            break;
          }
        } else {
          $view$$.right = $viewDependency$$.rightChanged ? $viewDependency$$.right : $viewDependency$$.left + $viewDependency$$.width;
        }
        $view$$.rightChanged = !0;
        break;
      case 3:
        $view$$.right = $viewDependency$$.left, $view$$.rightChanged = !0;
    }
  }
};
UICore.prototype.evalDependenceVer = function $UICore$$evalDependenceVer$($view$$, $parentView$$, $height$$, $iReference$$, $viewDependency$$) {
  if (null == $viewDependency$$) {
    logE("The view '" + $view$$.id + "' has a wrong reference");
  } else {
    switch($iReference$$) {
      case 0:
        $parentView$$ != $viewDependency$$ && ($view$$.top = $viewDependency$$.top);
        $view$$.topChanged = !0;
        break;
      case 1:
        $view$$.top = $viewDependency$$.bottomChanged ? $viewDependency$$.bottom : $viewDependency$$.top + $viewDependency$$.height;
        $view$$.topChanged = !0;
        break;
      case 2:
        if ($parentView$$ == $viewDependency$$) {
          if ($parentView$$.bottomChanged) {
            $view$$.bottom = $height$$;
          } else {
            $view$$.bottom = 0;
            break;
          }
        } else {
          $view$$.bottom = $viewDependency$$.bottomChanged ? $viewDependency$$.bottom : $viewDependency$$.top + $viewDependency$$.height;
        }
        $view$$.bottomChanged = !0;
        break;
      case 3:
        $view$$.bottom = $viewDependency$$.top, $view$$.bottomChanged = !0;
    }
  }
};
UICore.prototype.calculateViewDependency = function $UICore$$calculateViewDependency$($previousView$jscomp$1_view$$, $viewDependency$$, $parentView$$) {
  return "p" == $viewDependency$$ ? $parentView$$.id : "l" == $viewDependency$$ ? ($previousView$jscomp$1_view$$ = $previousView$jscomp$1_view$$.getPreviousView(), null == $previousView$jscomp$1_view$$ ? "" : $previousView$jscomp$1_view$$.id) : $viewDependency$$;
};
var UIViewUtilsInstance = new UIViewUtils, UIUtilsInstance = new UIUtils;
function WebUI() {
  this.scrollHeight = this.scrollWidth = 0;
  this.screens = [];
  this.nodesAdded = [];
  this.nodesUpdated = [];
  this.parentNodesRemoved = [];
  this.uiPrepare = new UIPrepare(this.refresh.bind(this));
  this.uiDraw = new UIDraw;
  this.configuration = this.uiCore = null;
  this.redrawTimer = new UIRedrawTimer;
  this.redraw = function() {
    var $countNodesAdded$$ = this.uiPrepare.addNodes(this.nodesAdded, this.screens, this.configuration), $countNodesRemoved$$ = this.uiPrepare.removeNodes(this.parentNodesRemoved), $countNodesModified$$ = this.uiPrepare.updateNodes(this.nodesUpdated, this.screens, this.configuration);
    log("Nodes added: " + $countNodesAdded$$ + " - Nodes removed: " + $countNodesRemoved$$ + " - Nodes modified: " + $countNodesModified$$);
    this.redrawTimer.timer(function() {
      log(" -- Redraw -- ");
      this.drawScreens();
    }.bind(this), this.configuration.timeRedraw);
  }.bind(this);
  this.resize = function() {
    this.configuration.refreshScreenSize();
    this.redraw();
  }.bind(this);
}
WebUI.prototype.start = function $WebUI$$start$($configuration$$) {
  this.clearUI();
  0 == this.scrollWidth && (this.scrollWidth = getScrollWidth());
  this.configuration = new UIConfiguration($configuration$$);
  uiShowLogs = this.configuration.showLogs;
  uiViewLogs = this.configuration.logsView;
  this.uiCore = new UICore(this.scrollWidth);
  this.drawScreens();
  this.listenDomEvents();
};
WebUI.prototype.listenDomEvents = function $WebUI$$listenDomEvents$() {
  var $bodyElement$$ = document.getElementsByTagName("BODY")[0];
  window.removeEventListener("resize", this.resize);
  window.addEventListener("resize", this.resize);
  var $callback$$ = function($$jscomp$iter$0_mutationsList$$) {
    $$jscomp$iter$0_mutationsList$$ = $jscomp.makeIterator($$jscomp$iter$0_mutationsList$$);
    for (var $$jscomp$key$mutation_mutation$$ = $$jscomp$iter$0_mutationsList$$.next(); !$$jscomp$key$mutation_mutation$$.done; $$jscomp$key$mutation_mutation$$ = $$jscomp$iter$0_mutationsList$$.next()) {
      if ($$jscomp$key$mutation_mutation$$ = $$jscomp$key$mutation_mutation$$.value, "childList" == $$jscomp$key$mutation_mutation$$.type) {
        for (var $attributeName$jscomp$1_i$$ = 0; $attributeName$jscomp$1_i$$ < $$jscomp$key$mutation_mutation$$.addedNodes.length; $attributeName$jscomp$1_i$$++) {
          this.nodesAdded.push($$jscomp$key$mutation_mutation$$.addedNodes[$attributeName$jscomp$1_i$$]);
        }
        for ($attributeName$jscomp$1_i$$ = 0; $attributeName$jscomp$1_i$$ < $$jscomp$key$mutation_mutation$$.removedNodes.length; $attributeName$jscomp$1_i$$++) {
          this.parentNodesRemoved.push($$jscomp$key$mutation_mutation$$.target);
        }
        this.redraw();
      } else {
        "attributes" == $$jscomp$key$mutation_mutation$$.type && ($attributeName$jscomp$1_i$$ = $$jscomp$key$mutation_mutation$$.attributeName, "id" == $attributeName$jscomp$1_i$$ || $attributeName$jscomp$1_i$$ == this.configuration.attribute || this.configuration.attributes.includes($attributeName$jscomp$1_i$$)) && (this.nodesUpdated.push($$jscomp$key$mutation_mutation$$.target), this.redraw());
      }
    }
  }.bind(this);
  (new MutationObserver($callback$$)).observe($bodyElement$$, {attributes:!0, childList:!0, subtree:!0});
};
WebUI.prototype.clearUI = function $WebUI$$clearUI$() {
  var $clearUI$$ = function $$clearUI$$$($element$$) {
    if ($element$$.ui && (delete $element$$.ui, $element$$ = $element$$.childNodes)) {
      for (var $i$$ = 0; $i$$ < $element$$.length; $i$$++) {
        $clearUI$$($element$$[$i$$]);
      }
    }
  };
  this.screens && (this.screens.forEach(function($screen$$) {
    $clearUI$$($screen$$.element);
  }), this.screens = []);
};
WebUI.prototype.refresh = function $WebUI$$refresh$() {
  this.redraw();
};
WebUI.prototype.drawScreens = function $WebUI$$drawScreens$() {
  startCounter("drawScreens");
  if (0 == this.screens.length) {
    var $bodyElement$jscomp$1_i$$ = document.getElementsByTagName("BODY")[0];
    this.uiPrepare.generateUIViews($bodyElement$jscomp$1_i$$, this.configuration, this.screens, null);
  }
  for ($bodyElement$jscomp$1_i$$ = 0; $bodyElement$jscomp$1_i$$ < this.screens.length; $bodyElement$jscomp$1_i$$++) {
    this.drawUIScreen(this.screens[$bodyElement$jscomp$1_i$$]);
  }
  log("Time drawing screens: " + endCounter("drawScreens"));
};
WebUI.prototype.drawUIScreen = function $WebUI$$drawUIScreen$($screen$$) {
  var $screenSizeChanged_timerLoadSizes$$ = 0, $timerOrderViews$$ = 0, $timerPrepare$$ = 0, $timerCore$$ = 0;
  startCounter("all");
  startCounter("prepare");
  startCounter("loadSizes");
  this.configuration.sendStartEvent();
  $screen$$.hasToBeCalculated() && ($screenSizeChanged_timerLoadSizes$$ = this.uiPrepare.loadSizeScreen($screen$$), this.uiPrepare.loadSizes($screen$$.getChildElements(), this.configuration, $screenSizeChanged_timerLoadSizes$$), $screenSizeChanged_timerLoadSizes$$ = endCounter("loadSizes"), startCounter("orderViews"), this.uiPrepare.orderViews($screen$$), $timerOrderViews$$ = endCounter("orderViews"), $timerPrepare$$ = endCounter("prepare"), startCounter("core"), this.uiCore.calculateScreen($screen$$), 
  $timerCore$$ = endCounter("core"));
  startCounter("draw");
  var $childrenSizes_timerDraw$$ = this.uiDraw.applyPositions($screen$$, this.configuration.viewColors, !$screen$$.hasToBeCalculated());
  this.uiDraw.applyVisibility($screen$$, null, this.configuration, !$screen$$.hasToBeCalculated());
  this.uiDraw.applySizeScreen($screen$$, $childrenSizes_timerDraw$$.maxX, $childrenSizes_timerDraw$$.maxY);
  $childrenSizes_timerDraw$$ = endCounter("draw");
  this.configuration.sendEndEvent();
  var $timerAll$$ = endCounter("all");
  log("[" + $screen$$.id + "] All: " + $timerAll$$ + "ms - Prepare: " + $timerPrepare$$ + "ms - Core: " + $timerCore$$ + "ms - Draw: " + $childrenSizes_timerDraw$$ + "ms - LoadSizes: " + $screenSizeChanged_timerLoadSizes$$ + "ms - OrderViews: " + $timerOrderViews$$ + "ms");
};
var WebUIInstance = new WebUI;
window.WebUI = WebUIInstance;
window.WebUI.start = WebUIInstance.start;
window.WebUI.refresh = WebUIInstance.refresh;

